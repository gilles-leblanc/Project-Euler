-module(problem8).
-include_lib("eunit/include/eunit.hrl").

-export([solve/0]).

solve() -> Number = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450,
			solve(Number, 0).


solve(0, Acc) -> Acc; 
solve(Number, Acc) -> NewAcc = product(Number),				  
					  case NewAcc > Acc of 
						true -> solve(Number div 10, NewAcc);
						false -> solve(Number div 10, Acc)
					  end.


product(Number) -> FirstDigit = Number rem 10,
				   SecondDigit = Number div 10 rem 10,
				   ThirdDigit = Number div 100 rem 10,
				   FourthDigit = Number div 1000 rem 10,
				   FifthDigit = Number div 10000 rem 10,
				   lists:foldl(fun(X, Prod) -> X * Prod end, 1, [FirstDigit, SecondDigit, ThirdDigit, FourthDigit, FifthDigit]).
				   

product_test_() -> [?_assert(product(11111) =:= 1),
					?_assert(product(00000) =:= 0),
					?_assert(product(12303) =:= 0),
					?_assert(product(123) =:= 0),
					?_assert(product(1234) =:= 0),
					?_assert(product(56789) =:= 15120),
					?_assert(product(44444) =:= 1024)].
					
solve_test_() -> [?_assert(solve(0, 0) =:= 0),
				  ?_assert(solve(11111, 0) =:= 1),
				  ?_assert(solve(111111, 0) =:= 1),
				  ?_assert(solve(0, 100) =:= 100),
				  ?_assert(solve(12321231, 10000) =:= 10000),
				  ?_assert(solve(23412, 0) =:= 48),
				  ?_assert(solve(23412, 10) =:= 48),
				  ?_assert(solve(23412, 50) =:= 50),
				  ?_assert(solve(23412324, 0) =:= 72),
				  ?_assert(solve(2341237658, 0) =:= 5040)].


